// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU{

    IN  inM[16],         // M value input  (M=contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Mux16(a[0..15]=false, b=instruction, sel=instruction[15] out=inputA, out[3]=writeM);
    Mux16(  a[0..15]=false, 
            b=instruction, 
            sel=instruction[15],
            out[0]=cJGT, 
            out[1]=cJEQ, 
            out[2]=cJLT, 
            out[3]=writeM, 
            out[4]=cDestD, 
            out[5]=cDestA, 
            out[6]=cNO, 
            out[7]=cF, 
            out[8]=cNY, 
            out[9]=cZY, 
            out[10]=cNX, 
            out[11]=cZX, 
            out[12]=cAorM, 
            out[13..14]=null, 
            out[15]=cType
            );
    // A Register logic
    Mux16(a=instruction, b=outALU, sel=cType, out=aMuxOut);
    Mux16(a=outA, b=inM, sel=cAorM, out=yALU);
    // loading the A register
    Not(in=cType, out=notCType);
    Or(a=notCType, b=cDestA, out=loadA);
    ARegister(in=aMuxOut, load=loadA, out=outA, out[0..14]=addressM);
    
    // D Register logic
    DRegister(in=outALU, load=cDestD, out=xALU);
    
    // ALU logic
    ALU(x=xALU, 
        y=yALU, 
        zx=cZX, 
        nx=cNX, 
        zy=cZY, 
        ny=cNY, 
        f=cF, 
        no=cNO, 
        out=outALU, out=outM, 
        zr=isZero, 
        ng=isNeg
        );
    Or(a=isZero, b=isNeg, out=lteq);
    Not(in=lteq, out=isPos);


    // jump logic
    And(a=cJGT, b=isPos, out=JGT);
    And(a=cJEQ, b=isZero, out=JEQ);
    And(a=cJLT, b=isNeg, out=JLT);

    Or(a=JGT, b=JEQ, out=JGTorJEQ);
    Or(a=JGTorJEQ, b=JLT, out=PCload);

    PC(in=outA, load=PCload, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}